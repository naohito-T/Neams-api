## 本番環境には「root」ディレクトリをデプロイしませんので、docker-compose.ymlがHerokuにプッシュできない
# そこでheroku.ymlを代替えファイルとしてDocker環境を操作しているのです。
# setup : アプリ環境を定義する場所
setup:
  # アドオン herokuアプリ作成時にアドオンを自動で追加する
  addons:
    - plan: heroku-postgresql
  # config : Herokuに追加する環境変数を指定。重要な環境変数は$ heroku config:setで直接設定する。
  # Dockerを使わないRailsデプロイでは以下の環境変数が自動で設定される。
  # ビルド時の環境変数は、それぞれ Dockerfile 内の ARG 行と一致する必要があります。
  config:
    RACK_ENV: production
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: enabled
    RAILS_SERVE_STATIC_FILES: enabled
    RAILS_MASTER_KEY: $RAILS_MASTER_KEY
# Dockerイメージのビルドを定義する場所
build:
  # 参照するDockerfileの場所を相対パスで指定する。
  docker:
    web: Dockerfile
  # ビルド時にDockerfileに渡す環境変数。DockerfileではARGで受け取る
  config:
    WORKDIR: app
# 実行プロセスを定義する。
run:
  # web dynoで実行する
  # bundle exec Bundlerでインストールされたgemを使用してコマンドを実行
  # puma -C [ファイルパス] pumaを起動させ、設定ファイルを組み込むようにしている。
  # ※このrun定義がない場合は、DockerfileのCMD命令が呼ばれます。
  # git push heroku [branch]で実行される。
  web: bundle exec puma -C config/puma.rb
